///fold:
var getTrajectories = function(data) {
  var keys = _.keys(data[0]);
  return reduce(function(key, memo) {
    var timeBasedKeys = map(function(i) {return key + "." + i}, _.range(data.length));
    var vals = _.map(data, key);
    return extend(_.zipObject(timeBasedKeys, vals), memo)
  }, [], keys)
};
///

// set up speaker optimality & number of iterations
var params = {
  alpha : 1,
  beta : 1,
  numSteps : 6
};

// possible states of the world
var states = ['dalmatian', 'poodle', 'dalmatian+poodle'];
var statePrior =  Categorical({vs: states, ps: [1/3, 1/3, 1/3]});

// possible utterances
var utterances = ['label1', 'label2', 'label3'];
var utterancePrior = Categorical({vs: utterances, ps: [1/3, 1/3, 1/3]});

// takes a sample from a (discretized) dirichlet distribution for each word,
// representing the extent to which that word describes each object
var lexiconPrior = Infer({method: 'enumerate'}, function(){
  var meanings = map(function(utt) {
    var t1Prob = uniformDraw([.01, .99]);
    var t2Prob = uniformDraw([.01, .99]);
    var t3Prob = uniformDraw([.01, .99]);
    return {'dalmatian' : t1Prob, 'poodle' : t2Prob, 'dalmatian+poodle':t3Prob};
  }, utterances);
  return _.zipObject(utterances, meanings);
});

// length-based cost (although they're all the same length here)
var uttCost = function(utt) {
  return utt.split(' ').length;
};

// literal listener (using real-valued lexicon)
var L0 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var stateSet = sample(statePrior)
    factor(lexicon[utt][stateSet]);
    return stateSet;
  });
});

// pragmatic speaker 
var S1 = cache(function(state, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    factor(params.alpha * (L0(utt, lexicon).score(state))
           - params.beta * uttCost(utt));
    return utt;
  });
});

// conventional listener
var L1 = cache(function(utt, lexicon) {
  return Infer({method:"enumerate"}, function(){
    var state = sample(statePrior);
    observe(S1(state, lexicon), utt);
    return state;
  });
});

// compute lexicon posterior, taking into account some previous observations
// speakers do this by assuming data came from knowledgable listener, and vice versa
var lexiconPosterior = cache(function(originAgent, data) {
  return Infer({method: 'enumerate'}, function() {
    var lexicon = sample(lexiconPrior);
    mapData({data: data}, function(datum){
      if(originAgent === 'L') 
        observe(S1(datum.response, lexicon), datum.utt);
      else if(originAgent === 'S') 
        observe(L1(datum.utt, lexicon), datum.response);
    });
    return lexicon;
  });
});

// conventional listener (L1, marginalizing over lexicons)
var L = function(utt, data) {
  return Infer({method:"enumerate"}, function(){
    var lexicon = sample(lexiconPosterior('L', data));
    var state = sample(L1(utt, lexicon));
    return state;
  });
};

// conventional speaker (S1, reasoning about expected L1 behavior across lexicons)
var S = function(state, data) {
  return Infer({method:"enumerate"}, function(){
    var utt = sample(utterancePrior);
    var listener = Infer({method: 'enumerate'}, function() {
      var lexicon = sample(lexiconPosterior('S', data));
      return sample(L1(utt, lexicon))
    });
    factor(params.alpha * listener.score(state)
           - params.beta * uttCost(utt));
    return utt;
  });
};

var model = function() {
  var step = function(data) {
    if(data.length > params.numSteps) return data;
    var state = sample(statePrior);
    var utt = sample(S(state, data));
    var response = sample(L(utt, data));
    var newDatum = {utt, response, intended: state, acc: state == response};
    return step(data.concat(newDatum));
  };
  step([]);
};

var data = [{"utt":"label3","response":"poodle"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label1","response":"dalmatian"},
	    {"utt":"label3","response":"poodle"}];
console.log(lexiconPosterior('S',data).MAP());
