// run using:
// webppl BDA.wppl --require ./refModule/

// Load in experimental data to condition on
var data = refModule.readCSV("./bdaInput/sketch_data.csv");
var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading expt data complete..."
	    + data.length + " data points in "
	    + conditions.length + ' contexts');

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var modelVersion = 'out_formatted';
var similarities = refModule.getSimilarities(modelVersion);
var costs = refModule.getCosts(modelVersion);
var possibleSketches = refModule.getPossibleSketches(costs);
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    + _.keys(similarities).length + " objects." );

// Package into config
var globalConfig = {
  modelVersion, similarities, possibleSketches, costs,
  storePredictives : false,  
  outputFileName : 'testing'
};

var modelAnalysis = function() {
  var params = {
    alpha : 1,// uniformDraw([0.5, 1, 2, 5]),
    typWeight : 1, //uniformDraw([0, 1, 2]),
    costWeight : uniformDraw([0, .5]) // Not using cost yet
  };
  var sketcherModel = initializeModel(extend(params, globalConfig));
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];

    // Run model
    
    var modelOutput = sketcherModel(target, context);
    // Store predives
    // if(globalConfig.storePredictives) {
    //   foreach(modelOutput.support(), function(s){
    // 	var key = _.values(c).concat(s);
    // 	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
    // 	globalStore.predictives = extend(globalStore.predictives, newPair);
    //   });
    // }
    
    // condition on data
    var itemData = refModule.getSubset(data, c);
    return memo + reduce(function(datum, memo) {
      return memo + modelOutput.score(datum.sketchLabel);
    }, 0, itemData);
  }, 0, conditions);    

  console.log(params);
  console.log(score);

  factor(score);
  return {predictive: globalStore.predictives, params : params};
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});

refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
