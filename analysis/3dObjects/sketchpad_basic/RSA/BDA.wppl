// run using:
// webppl BDA.wppl --require ./refModule/

// Load in experimental data to condition on
var data = refModule.readCSV("./bdaInput/sketch_data.csv");
var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading expt data complete..."
	    + data.length + " data points in "
	    + conditions.length + ' contexts');

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var similarities = refModule.getSimilarities();
var costs = refModule.getCosts();
var possibleSketches = refModule.getPossibleSketches(costs);
console.log("Loading model data complete..."
	    + possibleSketches.length + " sketches of " +
	    + _.keys(similarities['strict']).length + " objects." );

// Package into config
var globalConfig = {
  similarities, possibleSketches, costs,
  storePredictives : true,  
  outputFileName : 'testing'
};

var modelAnalysis = function() {
  var similarityMetric = uniformDraw(['nonstrict-high', 'strict-mid-prag']);
  var speakerModel = uniformDraw(['S1', 'S0']);
  
  var params = {
    similarityMetric, speakerModel,
    alpha : 1,//uniformDraw(_.range(0.5, 10, 0.5)),//.toFixed(1), //[0.5, 1, 2, 5]),
    simScale : 1,//speakerModel === 'S0' ? 1 : uniformDraw(_.range(0.5, 5, 0.5)),//.toFixed(1),//1, 2, 5])),
    costWeight : 1//uniformDraw(_.range(0, 1, 0.1))//.toFixed(1)//[0, .1, .2, .3, .4]) 
  };
  
  var model = initializeModel(extend(params, globalConfig));
  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.Target, c.Distractor1, c.Distractor2, c.Distractor3];
    var target = context[0];

    var modelOutput = model(target, context);
    // Store predives
    if(globalConfig.storePredictives) {
      foreach(modelOutput.support(), function(s){
    	var key = _.values(c).concat(s);
    	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
    	globalStore.predictives = extend(globalStore.predictives, newPair);
      });
    }
    
    // condition on data
    // var itemData = refModule.getSubset(data, c);
//    return memo + reduce(function(datum, memo) {
    var p = extend(params, globalConfig);
    var score = (params.speakerModel == 'S1' ?
		 refModule.getS1score(c.sketchLabel, target, context, p) :
		 refModule.getS0score(c.sketchLabel, target, p));
    return memo + score;
//    }, 0, itemData);
  }, 0, data);    

  console.log(params);
  console.log(score);

  factor(score);

  var paramsKey = _.values(params).join(',');
  return {predictive: globalStore.predictives, params : _.zipObject([paramsKey], [score])};
};

var outputERP = Infer({method:'enumerate', model: modelAnalysis});

refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
