// run using:
// webppl BDA.wppl --require ./refModule/

// Load in experimental data to condition on
var data = refModule.readCSV("./bdaInput/sketch_data.csv");
var conditions = refModule.readCSV("./bdaInput/unique_conditions.csv");
console.log("Loading expt data complete..."
	    + data.length + " data points in "
	    + conditions.length + ' contexts');

// Cache some properties of model
// Note: when moving to model comparison, can precache for all models...
var modelVersion = 'formatted_out';
var similarities = refModule.getSimilarities(modelVersion);
var possibleSketches = refModule.getPossibleSketches(similarities);
console.log("Loading model data complete...");

// Package into config
var globalConfig = {
  modelVersion, similarities, possibleSketches,
  storePredictives : false,  
  outputFileName : 'testing'
};

var modelAnalysis = function() {
  var params = {
    alpha : uniformDraw([0, 1, 2, 5, 10]),
    typWeight : uniformDraw([0, 1, 2]),
    costWeight : 0 // Not using cost yet
  };
  var sketcherModel = initializeModel(extend(params, globalConfig));

  var score = reduce(function(c, memo) {
    // Extract condition information
    var conditionType = c.condition;
    var context = [c.object1Name, c.object2Name, c.object3Name, c.object4Name];
    var target = context[0];

    // Run model
    var modelOutput = sketcherModel(target, context);
    
    // Store predives
    if(globalConfig.storePredictives) {
      foreach(modelOutput.support(), function(s){
  	var key = _.values(c).concat(s);
  	var newPair = _.zipObject([key], [Math.exp(modelOutput.score(s))]);
  	globalStore.predictives = extend(globalStore.predictives, newPair);
      });
    }
    
    // condition on data
    var itemData = refModule.getSubset(data, c);
    console.log(itemData);
    return memo + reduce(function(datum, memo) {
      return modelOutput.score(datum.utterance) + memo;
    }, 0, itemData);
  }, 0, conditions);

  console.log(params);
  console.log(score);

  factor(score);
  return {predictive: globalStore.predictives, params : params};
};

modelAnalysis();

// var outputERP = Infer({method:'MCMC', samples: 500, lag: 2, burn: 100, verbose: true},
// 		      modelAnalysis);

// refModule.bayesianErpWriter(outputERP, "./bdaOutput/" + globalConfig.outputFileName);
